<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- saved from url=(0062)http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/PATRICIA/ -->
<HTML><HEAD><META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"> <TITLE>PATRICIA</TITLE>
<META name="description" content="PATRICIA - Practical Algorithm to Retrieve Information Coded in Alphanumeric. Morris 1968">
<META name="keywords" content="PATRICIA Trees Trie Tree Practical Algorithm to Retrieve Information Coded in Alphanumeric Morris 1968 JACM 15(4) pp514--534 digital radix Tries index data structure word table lookup tables words strings dictionary">
<!-- DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN" -->
<!--        GENERATOR = vi (Linux + Solaris) -->
<META name="GENERATOR" content="vi (Linux + Solaris)">
<SCRIPT language="JavaScript">
var REMOTE_HOST="(none)";
</SCRIPT>
<!-- L.Allison, School of Comp. Sci. and SWE, Monash Uni, Australia 3168 -->
<!--              Content-Type = text/html;         charset=iso-8859-1 -->


</HEAD><BODY bgcolor="#DDDDDD" text="#000000" link="#0000FF" vlink="#400090" onload="if(top!=self)top.location=self.location;">

<TABLE border="0" cellspacing="0" cellpadding="2" width="100&percnt;">
<TBODY><TR><TD align="center">



<H3>PATRICIA</H3>


</TD></TR>
</TBODY></TABLE>

<TABLE border="0" cellspacing="0" cellpadding="2" width="100&percnt;">
<TBODY><TR><TD align="center" valign="top" width="10&percnt;">

  <TABLE border="1" cellspacing="0" cellpadding="1"> <!-- left column -->
  <TBODY><TR><TD>

    <A href="http://www.allisons.org/ll/" target="_top">LA&nbsp;home</A><BR>

<!-- Left  extras for children  NB. relative to children -->
<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/" target="_top">Algorithms</A><BR>
&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Glossary/" target="_top">glossary</A><BR>
&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/" target="_top">Binary&nbsp;Trees</A><BR>
&nbsp;&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Search/" target="_top">Search&nbsp;T'</A><BR>
&nbsp;&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/23tree/" target="_top">23trees</A><BR>
&nbsp;&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/234tree/" target="_top">234trees</A><BR>
&nbsp;&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Btree/" target="_top">Btrees</A><BR>
&nbsp;&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/" target="_top">Tries</A><BR>
&nbsp;&nbsp;<A href="./PATRICIA_files/PATRICIA.htm" target="_top">PATRICIA</A><BR>
&nbsp;&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Suffix/" target="_top">Suffix&nbsp;Trees</A><BR>
<BR>
&nbsp;<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Table/" target="_top">Tables</A><BR>

<!-- Left Extras Here -->
  <!-- Lloyd Allison -->
  </TD></TR>
  </TBODY></TABLE>

</TD><TD align="left" valign="top" width="80&percnt;">





<P>PATRICIA -
Practical Algorithm to Retrieve Information Coded in Alphanumeric,
D.R.Morrison (1968).
</P>

<P>A PATRICIA tree is related to a
<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/">Trie</A>.
The problem with Tries is that when the set of keys is sparse,
i.e. when the actual keys form a small subset of the set of potential keys,
as is very often the case,
many (most) of the internal nodes in the Trie have only one descendant.
This causes the Trie to have a high space-complexity.
</P>

<P>A Trie uses <EM>every</EM> part (bit, character, ...) of the key,
in turn, to determine which subtree to select.
A PATRICIA tree instead nominates (by storing its position in the node)
which element of the key will next be used to determine the branching.
This removes the need for any nodes with just one descendant:

</P><BLOCKQUOTE>
PATRICIA's index differs from Fredkin's Binary Trie structure in that the
index records only true [i.e. genuine] branches;
where a phrase has only
one proper right extension, it is not recorded in the index.
This fact reduces the number of index rows to only twice the number
of starts, amd makes it independent of the length of the stored phrases.<BR>
- Morrison 1968 pp520.
</BLOCKQUOTE>
<P></P>

<P>It is easiest to create a PATRICIA tree for
keys (strings) over an alphabet of size two: {a,b}, or {0,1}.
However, strings over an alphabet of more than two elements,
e.g. ascii, can be treated as strings over an alphabet of two
by taking the bits within each character of the larger alphabet.
</P>

<P>The following example shows the growth of a PATRICIA tree
under a sequence of insertions:
</P>

<TABLE border="1" cellspacing="0" cellpadding="0" align="right">
<TBODY><TR><TD align="center"><FONT size="2">C<BR>o<BR>m<BR>p<BR>u<BR>t<BR>e<BR>r<BR>-<BR>S<BR>c<BR>i<BR>e<BR>n<BR>c<BR>e<BR></FONT></TD></TR></TBODY></TABLE><DL><DD><PRE>empty           -- initial state
</PRE></DD></DL>

<PRE>
       12345    -- number character positions
insert ababb    -- the key
</PRE>

<DL><DD><PRE>----&gt; ababb
</PRE></DD></DL>


<DL>
<DT>insert ababa;
</DT><DD>search ends at abab<B>b</B>~=abab<B>a</B>;
</DD><DD>1st difference is at position 5, so...
</DD></DL>

<DL><DD><PRE>----&gt; [5]      -- i.e. test position #5
     .   .
   a.     . b
   .       .
  ababa     ababb
</PRE></DD></DL>


<DL>
<DT>insert ba;
</DT><DD>has no position #5;
</DD><DD>can skip key positions but must test in order, so...
</DD></DL>


<DL><DD><PRE>--------&gt; [1]
         .   .
        .     .
       .       .
    [5]         ba
   .   .
  .     .
 .       .
ababa     ababb
</PRE></DD></DL>


<DL>
<DT>insert aaabba;
</DT><DD>search ends at a<B>b</B>abb~=a<B>a</B>abba;
</DD><DD>can skip key positions but must test in order, so...
</DD></DL>


<DL><DD><PRE>--------&gt; [1]
         .   .
        .     .
       .       .
    [2]         ba
   .   .
  .     .
 .       .
aaabba    [5]
         .   .
        .     .
       .       .
      ababa     ababb
</PRE></DD></DL>


<DL>
<DT>insert ab;
</DT><DD>ab is also a prefix of ababa and ababb;
</DD><DD>must have ability to terminate at
    an intermediate node, as with Tries.
</DD></DL>


<DL><DD><PRE>-------&gt; [1]
        .   .
       .     .
      .       .
    [2]        ba
   .   .
  .     .
 .       .
aaabba   [3]---&gt;ab
         .
        .
       .
      [5]
     .   .
    .     .
   .       .
  ababa     ababb
</PRE></DD></DL>

<P>Dealing with a key, such as `ab', which is the prefix
of another key, <!-- lal1ison comp sci monash --> e.g. `ababa',
can be handled in various ways.  An actual, or notional,
terminating character, often denoted `$' (or `\0' in C and its relatives)
can be considered to be
a third character in the alphabet,
but only allowed to occur at the ends of keys.
This slight complication does not arise
in the special case that all keys have the same length.
</P>

<H3>Notes</H3>

<UL>
<LI>D. R. Morrison.
<I>PATRICIA -
Practical Algorithm to Retrieve Information Coded in Alphanumeric.</I>
Jrnl. of the ACM, <B>15</B>(4) pp514-534, Oct 1968.<BR>
<FONT size="-1">Originally presented PATRICIA as an index for searching
in marked-up text.</FONT>
</LI>

<LI>G. H. Gonnet.  Handbook of Algorithms and Data Structures.
Addison-Wesley, International Computer Series, pp 109, 1984.<BR>
<FONT size="-1">Contains a nice straightforward coding of the
PATRICIA algorithms, and of many others.
This book is a great resource.</FONT>
</LI>

<LI>R. Sedgewick.
<I>Algorithms in C.</I> Addison-Wesley, edn 1, pp253, 1990.<BR>
<FONT size="-1">Stores elements (or pointers to elements)
within internal `fork' nodes.</FONT>
</LI>

<LI>See [<A href="http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Suffix/">Suffix Trees</A>]
for string searching etc..</LI>
</UL>

<BR clear="all"> <HR size="2" noshade="">
1999 © L.A. ,
School of Computer Science and Software Engineering,
Monash University, Australia 3168.<BR>




</TD><TD align="center" valign="top" width="10&percnt;">



<TABLE border="1" cellspacing="0" cellpadding="1"> <!-- right column -->
<TBODY><TR><TD>
<FONT size="-1">window on the wide world:</FONT><BR>
<BR>


<TABLE border="1" cellspacing="0" cellpadding="3" bgcolor="#AAFFAA" width="100&percnt;">
<TBODY><TR><TD>

<SCRIPT language="JavaScript">
function locale()
 { var len=REMOTE_HOST.length;
   if(len>0 && REMOTE_HOST.lastIndexOf('.')==len-1)
   REMOTE_HOST=REMOTE_HOST.substring(0,len-1);
   if(REMOTE_HOST.lastIndexOf('.')==REMOTE_HOST.length-3)
   return REMOTE_HOST.substring(REMOTE_HOST.length-2).toLowerCase();
   else return 'us';
 }//locale

function showAmaz2007(str)
 { var part = str.split('|'), // part[0] should be keyw's
   usTemplate = '<' + 'a href="http://www.amazon.com/gp/product/XXX?ie=UTF8&tag=fourwheeldrivein&linkCode=as2&camp=1789&creative=9325&creativeASIN=XXX">YYY<' + '/a>',
   ukTemplate = '<' + 'a href="http://www.amazon.co.uk/gp/product/XXX?ie=UTF8&tag=fourwheeldriv-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=XXX">YYY<' + '/a>';
   if(part.length < 4) part[3] = ''; // post link
   if(part.length < 5) part[4] = ''; // locale
   var template = usTemplate;
   if(locale() == 'uk')template = ukTemplate;  // ?
   if(part[4] == 'uk') template = ukTemplate;  // overrides
   if(part[4] == 'us') template = usTemplate;  // overrides
   while(true)
    { var p=template.indexOf('XXX'); if(p < 0) break;
      template=template.substring(0,p)+part[1]+template.substring(p+3);
   }
   while(true)
    { var p=template.indexOf('YYY'); if(p < 0) break;
      template=template.substring(0,p)+part[2]+template.substring(p+3);
    }
   document.writeln(template + '<' + 'BR><'
     + 'FONT SIZE="-1">' + part[3] + '<' + '/FONT>');
 }//showAmaz2007

function doAmaz2007()
{var url=document.URL+"$",
     dflt="zzz|0143010336|The Darwin Awards V:|Next Evolution";
 var items = new Array( "/csse/$,"+dflt,
 "/AI/,MDL,Stat|0387261095|The Basics of S-Plus|Krause and Olson",
 "/AI/,MML,MDL,Stat|1584883871|Bayesian Artificial Intelligence|Korb and Nicholson",
 "/AI/,MML,MDL,Stat|0387954570|Modern Applied Statistics with S|Venables",
 "AlgDS,Algorithm,/CSC,/csse/,BIB|0201485419|The Art of Computer Programming, Vols.1-3|Donald Knuth",
 "AlgDS,/CSC,/csse/|0201000237|Data Structures and Algorithms|Aho et al|us",
 "AlgDS,Algorithm,BIB,/C/,/CSC,CSE2304|0201756080|Algorithms in C|Sedgwick",
 "AlgDS,Algorithm,BIB,/C/,/CSC,CSE2304|0201657880|Programming Pearls|Jon Bentley",
 "AlgDS,Algorithm|0262032937|Introduction to Algorithms|Cormen et al",
 "AlgDS,Algorithm,Java/,Java2,CSE2304|0321370139|Data Structures and Algorithm Analysis in Java|M.A.Weiss",
 "Bioinf,deString|1584886420|An Introduction to Systems Biology|U.Alon",
 "Bioinf,deString,AlgDS,Algorithm|0262101068|An Introduction to Bioinformatics Algorithms|Jones and Pevzner",
 "Bioinf,deString,DP/|0199277877|Introduction to Bioinformatics|Arthur Lesk",
 "Computers,BIB|019284055X|Colossus: The Secrets of Bletchley Park's Code Breaking Computers|Jack Copeland",
 "FP,Lambda|0954300653|An Introduction To Lambda Calculi|C.Hankin",
 "Haskell,FP,Lambda|0521692695|Programming in Haskell|Graham Hutton",
 "Java/,Java2,InterNet,/CSC|0596007736|Java in a Nutshell|David Flanagan",
 "JavaScript,InterNet|0596101996|JavaScript: The Definitive Guide|David Flanagan",
 "Lang,Syntax,Compil,Interp,CSE3322|0201100886|Compilers: Principles, Techniques, and Tools|Aho, Sethi and Ullman",
 "Lang,Syntax,Compil,Java/,Java2|052182060X|Modern Compiler Implementation in Java|Appel and Palsberg",
 "Logic,Prolog,/AI/|3540629718|Clause and Effect: Prolog Programming|W.F.Clocksin",
 "Math,AlgDS,Logic|1930190867|Discrete Mathematics for Computer Science|K.P.Bogart",
 "Math,Numer,/csse/,AlgDS,Logic|0201558025|Concrete Mathematics: A Foundation for Computer Science|Graham, Knuth, Patashnik",
 "MML,MDL,Stats,Wallace,CSC4,/Gas/,Bayes,Fisher,Ockham/|038723795X|Statistical and Inductive Inference by Minimum Message Length|Chris Wallace",
 "MDL,Stats|0262072815|The Minimum Description Length Principle|Grunwald",
 "Prolog,/AI/|0201403757|Prolog Programming for Artificial Intelligence|Ivan Bratko",
 "Propositional,Boolean,Digital,Wff|013198926X|Logic and Computer Design Fundamentals|Mano and Kime",
 "SML,FP/$,Lambda|052156543X|ML for the Working programmer|Larry Paulson",
 "Film|B0007TKNOM|Quatermass|BBC DVD|uk",
 "Film,Andromeda|B000JLTE5C|A for Andromeda|BBC DVD|uk",
 "Film,Andromeda|B000FPV8IS|The Andromeda Anthology|(1961) DVD|uk",
 "tildeLand,/4/|B0001Y4LBY|The Gods Must Be Crazy|DVD|us",
 "tildeLand,/4/|1859604374|Land Rover: Simply the Best|Martin Hodder",
 "tildeLand,/4/|1861265581|Land Rover, Series-1 to Freelander|Graham Robson",
 "tildeLand,/4/|B000F6RPUC|SWB Defender|Britains 1:32 model|uk",
 "tildeLand,/4/|B0007WTZCA|LR Discovery3|Britains 1:32 model|uk",
 "tildeLand,/4/|B0000AC99K|Range Rover|Britains 1:32 model|uk",
 "/csse/,Semantic,Publication,Seminar,BIB,Interp,Lambda|0521314232|A Practical Introduction to Denotational Semantics|L.Allison"
 );
 // document.writeln(items.length + "_items");  //debug
 var i, numMatch = 0, candidate = new Array();
 for(i = 0; i < items.length; i++)
  { var the_item = items[i].split("|");
    var keys     = the_item[0].split(",");
    var j;
    for(j = 0; j < keys.length; j++)
     { if(url.indexOf(keys[j]) >= 0)
        { candidate[numMatch]=i; numMatch++;  break; }
  }  }//for j, for i
 // document.writeln(numMatch + "_match");  //debug
 if(numMatch <= 0) showAmaz2007(dflt);
 else
  { var nM=numMatch, nth;
    var numShow=numMatch > 4 ? 3 : 2;
    for(nth=1; nth <= Math.min(numShow,numMatch); nth++)
     { var choice = Math.floor((nM - 0.0001) * Math.random());
       // document.writeln(' choice_' + choice ); // debug
       if(choice < 0) choice = 0;
       else if(choice >= nM) choice = nM - 1;
       if(nth>1) document.writeln('<'+'HR SIZE="1" NOSHADE>');
       showAmaz2007(items[candidate[choice]]);
       nM--; candidate[choice]=candidate[nM]; // !
  } }
    document.write( ' <' + 'FONT COLOR="#999999" SIZE="1">' + numMatch + '<' + '/FONT>');
    //  document.write( ' <' + 'FONT COLOR="#999999" SIZE="1">' + locale() + '<' + '/FONT>');
}//doAmaz2007

doAmaz2007();
</SCRIPT><A href="http://www.amazon.com/gp/product/0201657880?ie=UTF8&tag=fourwheeldrivein&linkCode=as2&camp=1789&creative=9325&creativeASIN=0201657880">Programming Pearls</A><BR><FONT size="-1">Jon Bentley</FONT>
<HR size="1" noshade="">
<A href="http://www.amazon.com/gp/product/0201000237?ie=UTF8&tag=fourwheeldrivein&linkCode=as2&camp=1789&creative=9325&creativeASIN=0201000237">Data Structures and Algorithms</A><BR><FONT size="-1">Aho et al</FONT>
<HR size="1" noshade="">
<A href="http://www.amazon.com/gp/product/0201485419?ie=UTF8&tag=fourwheeldrivein&linkCode=as2&camp=1789&creative=9325&creativeASIN=0201485419">The Art of Computer Programming, Vols.1-3</A><BR><FONT size="-1">Donald Knuth</FONT>
 <FONT color="#999999" size="1">9</FONT>

<NOSCRIPT></NOSCRIPT>

<!--
0143010336 The Darwin Awards V:Next Evolution      (2008)
0525949607 The Darwin Awards 4: Intelligent Design (2006)
0618680004 The God Delusion, Richard Dawkins
0761122745 Non Campus Mentis, including Florence of Arabia
-->

<!-- ====================================================================== -->
</TD></TR></TBODY></TABLE>
<BR>



<TABLE border="1" cellspacing="0" cellpadding="3" width="100&percnt;">
<TBODY><TR><TD>
<A href="http://www.linux.org/" target="_top">Linux</A><BR>
<FONT size="-1">free op. sys.</FONT><BR>

<A href="http://www.openoffice.org/" target="_top">OpenOffice</A><BR>
<FONT size="-1">free office suite,<BR>
ver&nbsp;2.2+</FONT><BR>

<A href="http://www.gimp.org/" target="_top">The GIMP</A><BR>
<FONT size="-1">~ free photoshop</FONT><BR>

<A href="http://www.mozilla.com/" target="_top">Firefox</A><BR>
<FONT size="-1">web browser</FONT><BR>

<A href="http://flashblock.mozdev.org/" target="_top">FlashBlock</A><BR>
<FONT size="-1">like it says!</FONT><BR>
</TD></TR></TBODY></TABLE>




    <!-- check for a recent-enough web-browser version -->
    <B><SCRIPT language="JavaScript">
    <!--
       var isOldBrowser = true,
           versionStr   = navigator.appVersion,
           appCodeName  = navigator.appCodeName.toLowerCase();
       if( appCodeName.indexOf('mozilla') >= 0  &&
           versionStr != null && versionStr.length > 0 )
        { var criticalVersion = 4.7; // recommended by m0n@sh uni .au
          var version = criticalVersion-0.001,  i,  numDot = 0,  stillOK = true;
          for( i = 0; i < versionStr.length; i++ ) // seek a number
           { if( versionStr.charAt(i) == '.' )
              { numDot ++ ;  stillOK = numDot < 2; }
             else
                stillOK = versionStr.charAt(i) >= '0' && versionStr.charAt(i) <= '9';
             if( ! stillOK ) break; // ...charAt(i) is bad
           }//for
          if( i > numDot ) // i>0, have a valid number in version[0..i-1]
             version = new Number( versionStr.substring(0,i) ) - 0;
          isOldBrowser = version < criticalVersion;
        }//if
       if( isOldBrowser )
        { document.writeln( '<' + 'BR>' );
          document.writeln( '<' + 'TABLE BORDER="1" CELLSPACING="0" WIDTH="100%"> ' );
          document.writeln( '<' + 'TR><' + 'TD BGCOLOR="#FFCCCC">' );
          document.writeln( '<' + 'FONT SIZE="+1">Upgrade your old web ' );
          document.writeln( '<' + 'A HREF="http://browsers.net' + 'scape.com/">[browser]<' + '/A>' );
          document.writeln( '<' + 'A HREF="http://www.moz' + 'illa.org/">[now]<' + '/A>!<' + '/FONT>' );
          document.writeln( '<' + '/TR> <' + '/TD> <' + '/TABLE>' );
        }//if
    // -->
    </SCRIPT></B>



<!-- Right extras for children  NB. relative to children -->

<!-- Right Extras Here -->
  </TD></TR>
  </TBODY></TABLE>

</TD></TR>
</TBODY></TABLE>



<TABLE border="0" cellspacing="0" cellpadding="2" width="100&percnt;">
<TBODY><TR><TD align="center">
<HR size="4" noshade=""> <!-- --------------------------------------subtable--->
<TABLE border="0" cellspacing="0" cellpadding="1">
<TBODY><TR><TD><FONT size="-1">

</FONT><ADDRESS><FONT size="-1"><A href="http://www.csse.monash.edu.au/~lloyd/README.html" target="_top">©</A>
L. Allison &nbsp;
<A href="http://www.allisons.org/ll/" target="_top">http://www.allisons.org/ll/</A> &nbsp;
<NOBR>(<U>or as otherwise indicated</U>),</NOBR><BR>
Faculty of Information Technology (Clayton),
<NOBR>Monash University,</NOBR>
<NOBR>Australia 3800</NOBR>
(6/'05&nbsp;was
<NOBR>School of Computer Science</NOBR> and Software Engineering,
<NOBR>Fac. Info. Tech.,</NOBR>
<NOBR>Monash University,</NOBR>
</FONT><FONT size="-2">was
<NOBR>Department of Computer Science,</NOBR>
<NOBR>Fac. Comp. &amp; Info. Tech.,</NOBR>
'89&nbsp;was
<NOBR>Department of Computer Science</NOBR>,
<NOBR>Fac. Sci.,</NOBR>
'68-'71&nbsp;was
<NOBR>Department of Information Science,</NOBR>
<NOBR>Fac. Sci<A href="./PATRICIA_files/PATRICIA.htm">.</A>)</NOBR></FONT>
</ADDRESS>

<FONT size="-1">
Created with "vi (Linux + Solaris)",&nbsp;
charset=iso-8859-1,&nbsp;
<NOBR>fetched Saturday, 19-Sep-2009 11:04:11 EST.</NOBR>
</FONT>
</TD></TR>
</TBODY></TABLE>
<HR size="4" noshade=""> <!-- --------------------------------------subtable--->
</TD></TR>
</TBODY></TABLE>




</BODY></HTML>